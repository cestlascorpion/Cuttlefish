// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: proto/cuttlefish.proto

package cuttlefish

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EgK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy string `protobuf:"bytes,1,opt,name=proxy,proto3" json:"proxy,omitempty"`
	SeqId string `protobuf:"bytes,2,opt,name=seqId,proto3" json:"seqId,omitempty"`
}

func (x *EgK) Reset() {
	*x = EgK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgK) ProtoMessage() {}

func (x *EgK) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgK.ProtoReflect.Descriptor instead.
func (*EgK) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{0}
}

func (x *EgK) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *EgK) GetSeqId() string {
	if x != nil {
		return x.SeqId
	}
	return ""
}

type EgV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts   int64  `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *EgV) Reset() {
	*x = EgV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgV) ProtoMessage() {}

func (x *EgV) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgV.ProtoReflect.Descriptor instead.
func (*EgV) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{1}
}

func (x *EgV) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *EgV) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type Tentacle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // eg: serialized EgK
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"` // eg: serialized EgV
}

func (x *Tentacle) Reset() {
	*x = Tentacle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tentacle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tentacle) ProtoMessage() {}

func (x *Tentacle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tentacle.ProtoReflect.Descriptor instead.
func (*Tentacle) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{2}
}

func (x *Tentacle) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tentacle) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TentacleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TentacleList []*Tentacle `protobuf:"bytes,1,rep,name=tentacle_list,json=tentacleList,proto3" json:"tentacle_list,omitempty"`
}

func (x *TentacleInfo) Reset() {
	*x = TentacleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TentacleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TentacleInfo) ProtoMessage() {}

func (x *TentacleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TentacleInfo.ProtoReflect.Descriptor instead.
func (*TentacleInfo) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{3}
}

func (x *TentacleInfo) GetTentacleList() []*Tentacle {
	if x != nil {
		return x.TentacleList
	}
	return nil
}

type GetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetTentacleReq) Reset() {
	*x = GetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleReq) ProtoMessage() {}

func (x *GetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleReq.ProtoReflect.Descriptor instead.
func (*GetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{4}
}

func (x *GetTentacleReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TentacleList []*Tentacle `protobuf:"bytes,1,rep,name=tentacle_list,json=tentacleList,proto3" json:"tentacle_list,omitempty"`
}

func (x *GetTentacleResp) Reset() {
	*x = GetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleResp) ProtoMessage() {}

func (x *GetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleResp.ProtoReflect.Descriptor instead.
func (*GetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{5}
}

func (x *GetTentacleResp) GetTentacleList() []*Tentacle {
	if x != nil {
		return x.TentacleList
	}
	return nil
}

type BatchGetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []uint32 `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *BatchGetTentacleReq) Reset() {
	*x = BatchGetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTentacleReq) ProtoMessage() {}

func (x *BatchGetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchGetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGetTentacleReq) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type BatchGetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleInfo `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetTentacleResp) Reset() {
	*x = BatchGetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTentacleResp) ProtoMessage() {}

func (x *BatchGetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchGetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{7}
}

func (x *BatchGetTentacleResp) GetInfoList() map[uint32]*TentacleInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type SetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TentacleList []*Tentacle `protobuf:"bytes,2,rep,name=tentacle_list,json=tentacleList,proto3" json:"tentacle_list,omitempty"`
}

func (x *SetTentacleReq) Reset() {
	*x = SetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTentacleReq) ProtoMessage() {}

func (x *SetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTentacleReq.ProtoReflect.Descriptor instead.
func (*SetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{8}
}

func (x *SetTentacleReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetTentacleReq) GetTentacleList() []*Tentacle {
	if x != nil {
		return x.TentacleList
	}
	return nil
}

type SetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *SetTentacleResp) Reset() {
	*x = SetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTentacleResp) ProtoMessage() {}

func (x *SetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTentacleResp.ProtoReflect.Descriptor instead.
func (*SetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{9}
}

func (x *SetTentacleResp) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type BatchSetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleInfo `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchSetTentacleReq) Reset() {
	*x = BatchSetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetTentacleReq) ProtoMessage() {}

func (x *BatchSetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchSetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{10}
}

func (x *BatchSetTentacleReq) GetInfoList() map[uint32]*TentacleInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type BatchSetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint32]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchSetTentacleResp) Reset() {
	*x = BatchSetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetTentacleResp) ProtoMessage() {}

func (x *BatchSetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchSetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{11}
}

func (x *BatchSetTentacleResp) GetResult() map[uint32]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

type DelTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TentacleList []*Tentacle `protobuf:"bytes,2,rep,name=tentacle_list,json=tentacleList,proto3" json:"tentacle_list,omitempty"`
}

func (x *DelTentacleReq) Reset() {
	*x = DelTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTentacleReq) ProtoMessage() {}

func (x *DelTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTentacleReq.ProtoReflect.Descriptor instead.
func (*DelTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{12}
}

func (x *DelTentacleReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelTentacleReq) GetTentacleList() []*Tentacle {
	if x != nil {
		return x.TentacleList
	}
	return nil
}

type DelTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offline bool `protobuf:"varint,1,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (x *DelTentacleResp) Reset() {
	*x = DelTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTentacleResp) ProtoMessage() {}

func (x *DelTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTentacleResp.ProtoReflect.Descriptor instead.
func (*DelTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{13}
}

func (x *DelTentacleResp) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

type BatchDelTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleInfo `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchDelTentacleReq) Reset() {
	*x = BatchDelTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelTentacleReq) ProtoMessage() {}

func (x *BatchDelTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchDelTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{14}
}

func (x *BatchDelTentacleReq) GetInfoList() map[uint32]*TentacleInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type BatchDelTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint32]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchDelTentacleResp) Reset() {
	*x = BatchDelTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelTentacleResp) ProtoMessage() {}

func (x *BatchDelTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchDelTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{15}
}

func (x *BatchDelTentacleResp) GetResult() map[uint32]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

type HistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	St bool  `protobuf:"varint,1,opt,name=st,proto3" json:"st,omitempty"` // online - true; offline - false
	Ts int64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *HistoryInfo) Reset() {
	*x = HistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryInfo) ProtoMessage() {}

func (x *HistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryInfo.ProtoReflect.Descriptor instead.
func (*HistoryInfo) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{16}
}

func (x *HistoryInfo) GetSt() bool {
	if x != nil {
		return x.St
	}
	return false
}

func (x *HistoryInfo) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type GetTentacleHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From int64  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To   int64  `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetTentacleHistoryReq) Reset() {
	*x = GetTentacleHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleHistoryReq) ProtoMessage() {}

func (x *GetTentacleHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleHistoryReq.ProtoReflect.Descriptor instead.
func (*GetTentacleHistoryReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{17}
}

func (x *GetTentacleHistoryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTentacleHistoryReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetTentacleHistoryReq) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

type GetTentacleHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList []*HistoryInfo `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty"`
}

func (x *GetTentacleHistoryResp) Reset() {
	*x = GetTentacleHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleHistoryResp) ProtoMessage() {}

func (x *GetTentacleHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleHistoryResp.ProtoReflect.Descriptor instead.
func (*GetTentacleHistoryResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{18}
}

func (x *GetTentacleHistoryResp) GetInfoList() []*HistoryInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

var File_proto_cuttlefish_proto protoreflect.FileDescriptor

var file_proto_cuttlefish_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x22, 0x31, 0x0a, 0x03, 0x45, 0x67, 0x4b, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x03, 0x45, 0x67, 0x56, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x2e, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x49, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x0c, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x30, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x74,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4a,
	0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x75, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x75,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x97, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x0b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xd4, 0x04, 0x0a, 0x0a, 0x63, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x73, 0x74,
	0x6c, 0x61, 0x73, 0x63, 0x6f, 0x72, 0x70, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x73, 0x68, 0x3b, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cuttlefish_proto_rawDescOnce sync.Once
	file_proto_cuttlefish_proto_rawDescData = file_proto_cuttlefish_proto_rawDesc
)

func file_proto_cuttlefish_proto_rawDescGZIP() []byte {
	file_proto_cuttlefish_proto_rawDescOnce.Do(func() {
		file_proto_cuttlefish_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cuttlefish_proto_rawDescData)
	})
	return file_proto_cuttlefish_proto_rawDescData
}

var file_proto_cuttlefish_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_proto_cuttlefish_proto_goTypes = []interface{}{
	(*EgK)(nil),                    // 0: Cuttlefish.EgK
	(*EgV)(nil),                    // 1: Cuttlefish.EgV
	(*Tentacle)(nil),               // 2: Cuttlefish.Tentacle
	(*TentacleInfo)(nil),           // 3: Cuttlefish.TentacleInfo
	(*GetTentacleReq)(nil),         // 4: Cuttlefish.GetTentacleReq
	(*GetTentacleResp)(nil),        // 5: Cuttlefish.GetTentacleResp
	(*BatchGetTentacleReq)(nil),    // 6: Cuttlefish.BatchGetTentacleReq
	(*BatchGetTentacleResp)(nil),   // 7: Cuttlefish.BatchGetTentacleResp
	(*SetTentacleReq)(nil),         // 8: Cuttlefish.SetTentacleReq
	(*SetTentacleResp)(nil),        // 9: Cuttlefish.SetTentacleResp
	(*BatchSetTentacleReq)(nil),    // 10: Cuttlefish.BatchSetTentacleReq
	(*BatchSetTentacleResp)(nil),   // 11: Cuttlefish.BatchSetTentacleResp
	(*DelTentacleReq)(nil),         // 12: Cuttlefish.DelTentacleReq
	(*DelTentacleResp)(nil),        // 13: Cuttlefish.DelTentacleResp
	(*BatchDelTentacleReq)(nil),    // 14: Cuttlefish.BatchDelTentacleReq
	(*BatchDelTentacleResp)(nil),   // 15: Cuttlefish.BatchDelTentacleResp
	(*HistoryInfo)(nil),            // 16: Cuttlefish.HistoryInfo
	(*GetTentacleHistoryReq)(nil),  // 17: Cuttlefish.GetTentacleHistoryReq
	(*GetTentacleHistoryResp)(nil), // 18: Cuttlefish.GetTentacleHistoryResp
	nil,                            // 19: Cuttlefish.BatchGetTentacleResp.InfoListEntry
	nil,                            // 20: Cuttlefish.BatchSetTentacleReq.InfoListEntry
	nil,                            // 21: Cuttlefish.BatchSetTentacleResp.ResultEntry
	nil,                            // 22: Cuttlefish.BatchDelTentacleReq.InfoListEntry
	nil,                            // 23: Cuttlefish.BatchDelTentacleResp.ResultEntry
}
var file_proto_cuttlefish_proto_depIdxs = []int32{
	2,  // 0: Cuttlefish.TentacleInfo.tentacle_list:type_name -> Cuttlefish.Tentacle
	2,  // 1: Cuttlefish.GetTentacleResp.tentacle_list:type_name -> Cuttlefish.Tentacle
	19, // 2: Cuttlefish.BatchGetTentacleResp.info_list:type_name -> Cuttlefish.BatchGetTentacleResp.InfoListEntry
	2,  // 3: Cuttlefish.SetTentacleReq.tentacle_list:type_name -> Cuttlefish.Tentacle
	20, // 4: Cuttlefish.BatchSetTentacleReq.info_list:type_name -> Cuttlefish.BatchSetTentacleReq.InfoListEntry
	21, // 5: Cuttlefish.BatchSetTentacleResp.result:type_name -> Cuttlefish.BatchSetTentacleResp.ResultEntry
	2,  // 6: Cuttlefish.DelTentacleReq.tentacle_list:type_name -> Cuttlefish.Tentacle
	22, // 7: Cuttlefish.BatchDelTentacleReq.info_list:type_name -> Cuttlefish.BatchDelTentacleReq.InfoListEntry
	23, // 8: Cuttlefish.BatchDelTentacleResp.result:type_name -> Cuttlefish.BatchDelTentacleResp.ResultEntry
	16, // 9: Cuttlefish.GetTentacleHistoryResp.info_list:type_name -> Cuttlefish.HistoryInfo
	3,  // 10: Cuttlefish.BatchGetTentacleResp.InfoListEntry.value:type_name -> Cuttlefish.TentacleInfo
	3,  // 11: Cuttlefish.BatchSetTentacleReq.InfoListEntry.value:type_name -> Cuttlefish.TentacleInfo
	3,  // 12: Cuttlefish.BatchDelTentacleReq.InfoListEntry.value:type_name -> Cuttlefish.TentacleInfo
	4,  // 13: Cuttlefish.cuttlefish.GetTentacle:input_type -> Cuttlefish.GetTentacleReq
	6,  // 14: Cuttlefish.cuttlefish.BatchGetTentacle:input_type -> Cuttlefish.BatchGetTentacleReq
	8,  // 15: Cuttlefish.cuttlefish.SetTentacle:input_type -> Cuttlefish.SetTentacleReq
	10, // 16: Cuttlefish.cuttlefish.BatchSetTentacle:input_type -> Cuttlefish.BatchSetTentacleReq
	12, // 17: Cuttlefish.cuttlefish.DelTentacle:input_type -> Cuttlefish.DelTentacleReq
	14, // 18: Cuttlefish.cuttlefish.BatchDelTentacle:input_type -> Cuttlefish.BatchDelTentacleReq
	17, // 19: Cuttlefish.cuttlefish.GetTentacleHistory:input_type -> Cuttlefish.GetTentacleHistoryReq
	5,  // 20: Cuttlefish.cuttlefish.GetTentacle:output_type -> Cuttlefish.GetTentacleResp
	7,  // 21: Cuttlefish.cuttlefish.BatchGetTentacle:output_type -> Cuttlefish.BatchGetTentacleResp
	9,  // 22: Cuttlefish.cuttlefish.SetTentacle:output_type -> Cuttlefish.SetTentacleResp
	11, // 23: Cuttlefish.cuttlefish.BatchSetTentacle:output_type -> Cuttlefish.BatchSetTentacleResp
	13, // 24: Cuttlefish.cuttlefish.DelTentacle:output_type -> Cuttlefish.DelTentacleResp
	15, // 25: Cuttlefish.cuttlefish.BatchDelTentacle:output_type -> Cuttlefish.BatchDelTentacleResp
	18, // 26: Cuttlefish.cuttlefish.GetTentacleHistory:output_type -> Cuttlefish.GetTentacleHistoryResp
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_cuttlefish_proto_init() }
func file_proto_cuttlefish_proto_init() {
	if File_proto_cuttlefish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cuttlefish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tentacle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TentacleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cuttlefish_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cuttlefish_proto_goTypes,
		DependencyIndexes: file_proto_cuttlefish_proto_depIdxs,
		MessageInfos:      file_proto_cuttlefish_proto_msgTypes,
	}.Build()
	File_proto_cuttlefish_proto = out.File
	file_proto_cuttlefish_proto_rawDesc = nil
	file_proto_cuttlefish_proto_goTypes = nil
	file_proto_cuttlefish_proto_depIdxs = nil
}
