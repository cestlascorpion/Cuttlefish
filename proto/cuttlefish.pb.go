// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: proto/cuttlefish.proto

package cuttlefish

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tentacle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Val map[string]string `protobuf:"bytes,3,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tentacle) Reset() {
	*x = Tentacle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tentacle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tentacle) ProtoMessage() {}

func (x *Tentacle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tentacle.ProtoReflect.Descriptor instead.
func (*Tentacle) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{0}
}

func (x *Tentacle) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Tentacle) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tentacle) GetVal() map[string]string {
	if x != nil {
		return x.Val
	}
	return nil
}

type TentacleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TentacleList []*Tentacle `protobuf:"bytes,1,rep,name=tentacle_list,json=tentacleList,proto3" json:"tentacle_list,omitempty"`
}

func (x *TentacleList) Reset() {
	*x = TentacleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TentacleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TentacleList) ProtoMessage() {}

func (x *TentacleList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TentacleList.ProtoReflect.Descriptor instead.
func (*TentacleList) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{1}
}

func (x *TentacleList) GetTentacleList() []*Tentacle {
	if x != nil {
		return x.TentacleList
	}
	return nil
}

type GetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetTentacleReq) Reset() {
	*x = GetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleReq) ProtoMessage() {}

func (x *GetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleReq.ProtoReflect.Descriptor instead.
func (*GetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{2}
}

func (x *GetTentacleReq) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*Tentacle `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *GetTentacleResp) Reset() {
	*x = GetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTentacleResp) ProtoMessage() {}

func (x *GetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTentacleResp.ProtoReflect.Descriptor instead.
func (*GetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{3}
}

func (x *GetTentacleResp) GetInfo() []*Tentacle {
	if x != nil {
		return x.Info
	}
	return nil
}

type BatchGetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []uint32 `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
}

func (x *BatchGetTentacleReq) Reset() {
	*x = BatchGetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTentacleReq) ProtoMessage() {}

func (x *BatchGetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchGetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetTentacleReq) GetUidList() []uint32 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type BatchGetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleList `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetTentacleResp) Reset() {
	*x = BatchGetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTentacleResp) ProtoMessage() {}

func (x *BatchGetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchGetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetTentacleResp) GetInfoList() map[uint32]*TentacleList {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type SetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Tentacle `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SetTentacleReq) Reset() {
	*x = SetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTentacleReq) ProtoMessage() {}

func (x *SetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTentacleReq.ProtoReflect.Descriptor instead.
func (*SetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{6}
}

func (x *SetTentacleReq) GetInfo() *Tentacle {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *SetTentacleResp) Reset() {
	*x = SetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTentacleResp) ProtoMessage() {}

func (x *SetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTentacleResp.ProtoReflect.Descriptor instead.
func (*SetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{7}
}

func (x *SetTentacleResp) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type BatchSetTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleList `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchSetTentacleReq) Reset() {
	*x = BatchSetTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetTentacleReq) ProtoMessage() {}

func (x *BatchSetTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchSetTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{8}
}

func (x *BatchSetTentacleReq) GetInfoList() map[uint32]*TentacleList {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type BatchSetTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint32]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchSetTentacleResp) Reset() {
	*x = BatchSetTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetTentacleResp) ProtoMessage() {}

func (x *BatchSetTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchSetTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{9}
}

func (x *BatchSetTentacleResp) GetResult() map[uint32]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

type DelTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Tentacle `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DelTentacleReq) Reset() {
	*x = DelTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTentacleReq) ProtoMessage() {}

func (x *DelTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTentacleReq.ProtoReflect.Descriptor instead.
func (*DelTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{10}
}

func (x *DelTentacleReq) GetInfo() *Tentacle {
	if x != nil {
		return x.Info
	}
	return nil
}

type DelTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offline bool `protobuf:"varint,1,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (x *DelTentacleResp) Reset() {
	*x = DelTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTentacleResp) ProtoMessage() {}

func (x *DelTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTentacleResp.ProtoReflect.Descriptor instead.
func (*DelTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{11}
}

func (x *DelTentacleResp) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

type BatchDelTentacleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoList map[uint32]*TentacleList `protobuf:"bytes,1,rep,name=info_list,json=infoList,proto3" json:"info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchDelTentacleReq) Reset() {
	*x = BatchDelTentacleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelTentacleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelTentacleReq) ProtoMessage() {}

func (x *BatchDelTentacleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelTentacleReq.ProtoReflect.Descriptor instead.
func (*BatchDelTentacleReq) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{12}
}

func (x *BatchDelTentacleReq) GetInfoList() map[uint32]*TentacleList {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type BatchDelTentacleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint32]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchDelTentacleResp) Reset() {
	*x = BatchDelTentacleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cuttlefish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDelTentacleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDelTentacleResp) ProtoMessage() {}

func (x *BatchDelTentacleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cuttlefish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDelTentacleResp.ProtoReflect.Descriptor instead.
func (*BatchDelTentacleResp) Descriptor() ([]byte, []int) {
	return file_proto_cuttlefish_proto_rawDescGZIP(), []int{13}
}

func (x *BatchDelTentacleResp) GetResult() map[uint32]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_proto_cuttlefish_proto protoreflect.FileDescriptor

var file_proto_cuttlefish_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49,
	0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x3b, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x13, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a,
	0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x75,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x2b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x75, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x55, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xf5, 0x03, 0x0a, 0x0a, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x54,
	0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65,
	0x6e, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x54, 0x65, 0x6e,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x73, 0x74, 0x6c, 0x61,
	0x73, 0x63, 0x6f, 0x72, 0x70, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x73, 0x68, 0x3b, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73, 0x68, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cuttlefish_proto_rawDescOnce sync.Once
	file_proto_cuttlefish_proto_rawDescData = file_proto_cuttlefish_proto_rawDesc
)

func file_proto_cuttlefish_proto_rawDescGZIP() []byte {
	file_proto_cuttlefish_proto_rawDescOnce.Do(func() {
		file_proto_cuttlefish_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cuttlefish_proto_rawDescData)
	})
	return file_proto_cuttlefish_proto_rawDescData
}

var file_proto_cuttlefish_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_cuttlefish_proto_goTypes = []interface{}{
	(*Tentacle)(nil),             // 0: Cuttlefish.Tentacle
	(*TentacleList)(nil),         // 1: Cuttlefish.TentacleList
	(*GetTentacleReq)(nil),       // 2: Cuttlefish.GetTentacleReq
	(*GetTentacleResp)(nil),      // 3: Cuttlefish.GetTentacleResp
	(*BatchGetTentacleReq)(nil),  // 4: Cuttlefish.BatchGetTentacleReq
	(*BatchGetTentacleResp)(nil), // 5: Cuttlefish.BatchGetTentacleResp
	(*SetTentacleReq)(nil),       // 6: Cuttlefish.SetTentacleReq
	(*SetTentacleResp)(nil),      // 7: Cuttlefish.SetTentacleResp
	(*BatchSetTentacleReq)(nil),  // 8: Cuttlefish.BatchSetTentacleReq
	(*BatchSetTentacleResp)(nil), // 9: Cuttlefish.BatchSetTentacleResp
	(*DelTentacleReq)(nil),       // 10: Cuttlefish.DelTentacleReq
	(*DelTentacleResp)(nil),      // 11: Cuttlefish.DelTentacleResp
	(*BatchDelTentacleReq)(nil),  // 12: Cuttlefish.BatchDelTentacleReq
	(*BatchDelTentacleResp)(nil), // 13: Cuttlefish.BatchDelTentacleResp
	nil,                          // 14: Cuttlefish.Tentacle.ValEntry
	nil,                          // 15: Cuttlefish.BatchGetTentacleResp.InfoListEntry
	nil,                          // 16: Cuttlefish.BatchSetTentacleReq.InfoListEntry
	nil,                          // 17: Cuttlefish.BatchSetTentacleResp.ResultEntry
	nil,                          // 18: Cuttlefish.BatchDelTentacleReq.InfoListEntry
	nil,                          // 19: Cuttlefish.BatchDelTentacleResp.ResultEntry
}
var file_proto_cuttlefish_proto_depIdxs = []int32{
	14, // 0: Cuttlefish.Tentacle.val:type_name -> Cuttlefish.Tentacle.ValEntry
	0,  // 1: Cuttlefish.TentacleList.tentacle_list:type_name -> Cuttlefish.Tentacle
	0,  // 2: Cuttlefish.GetTentacleResp.info:type_name -> Cuttlefish.Tentacle
	15, // 3: Cuttlefish.BatchGetTentacleResp.info_list:type_name -> Cuttlefish.BatchGetTentacleResp.InfoListEntry
	0,  // 4: Cuttlefish.SetTentacleReq.info:type_name -> Cuttlefish.Tentacle
	16, // 5: Cuttlefish.BatchSetTentacleReq.info_list:type_name -> Cuttlefish.BatchSetTentacleReq.InfoListEntry
	17, // 6: Cuttlefish.BatchSetTentacleResp.result:type_name -> Cuttlefish.BatchSetTentacleResp.ResultEntry
	0,  // 7: Cuttlefish.DelTentacleReq.info:type_name -> Cuttlefish.Tentacle
	18, // 8: Cuttlefish.BatchDelTentacleReq.info_list:type_name -> Cuttlefish.BatchDelTentacleReq.InfoListEntry
	19, // 9: Cuttlefish.BatchDelTentacleResp.result:type_name -> Cuttlefish.BatchDelTentacleResp.ResultEntry
	1,  // 10: Cuttlefish.BatchGetTentacleResp.InfoListEntry.value:type_name -> Cuttlefish.TentacleList
	1,  // 11: Cuttlefish.BatchSetTentacleReq.InfoListEntry.value:type_name -> Cuttlefish.TentacleList
	1,  // 12: Cuttlefish.BatchDelTentacleReq.InfoListEntry.value:type_name -> Cuttlefish.TentacleList
	2,  // 13: Cuttlefish.cuttlefish.GetTentacle:input_type -> Cuttlefish.GetTentacleReq
	4,  // 14: Cuttlefish.cuttlefish.BatchGetTentacle:input_type -> Cuttlefish.BatchGetTentacleReq
	6,  // 15: Cuttlefish.cuttlefish.SetTentacle:input_type -> Cuttlefish.SetTentacleReq
	8,  // 16: Cuttlefish.cuttlefish.BatchSetTentacle:input_type -> Cuttlefish.BatchSetTentacleReq
	10, // 17: Cuttlefish.cuttlefish.DelTentacle:input_type -> Cuttlefish.DelTentacleReq
	12, // 18: Cuttlefish.cuttlefish.BatchDelTentacle:input_type -> Cuttlefish.BatchDelTentacleReq
	3,  // 19: Cuttlefish.cuttlefish.GetTentacle:output_type -> Cuttlefish.GetTentacleResp
	5,  // 20: Cuttlefish.cuttlefish.BatchGetTentacle:output_type -> Cuttlefish.BatchGetTentacleResp
	7,  // 21: Cuttlefish.cuttlefish.SetTentacle:output_type -> Cuttlefish.SetTentacleResp
	9,  // 22: Cuttlefish.cuttlefish.BatchSetTentacle:output_type -> Cuttlefish.BatchSetTentacleResp
	11, // 23: Cuttlefish.cuttlefish.DelTentacle:output_type -> Cuttlefish.DelTentacleResp
	13, // 24: Cuttlefish.cuttlefish.BatchDelTentacle:output_type -> Cuttlefish.BatchDelTentacleResp
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_cuttlefish_proto_init() }
func file_proto_cuttlefish_proto_init() {
	if File_proto_cuttlefish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cuttlefish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tentacle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TentacleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelTentacleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cuttlefish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDelTentacleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cuttlefish_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cuttlefish_proto_goTypes,
		DependencyIndexes: file_proto_cuttlefish_proto_depIdxs,
		MessageInfos:      file_proto_cuttlefish_proto_msgTypes,
	}.Build()
	File_proto_cuttlefish_proto = out.File
	file_proto_cuttlefish_proto_rawDesc = nil
	file_proto_cuttlefish_proto_goTypes = nil
	file_proto_cuttlefish_proto_depIdxs = nil
}
